import e from"path";import{fileURLToPath as o}from"url";import r from"fs";import n from"dotenv";import{z as t}from"zod";import{DEFAULT_HEALTH_CHECK_OPTIONS as s}from"./utils/constants.js";const i=o(import.meta.url),a=e.dirname(i);if("test"!==process.env.NODE_ENV){const o=e.resolve(a,"..",".env"),t=e.resolve(process.cwd(),".env");r.existsSync(o)?n.config({path:o}):r.existsSync(t)?n.config({path:t}):console.log("ℹ️ Aucun fichier .env trouvé, utilisation des valeurs par défaut.")}const c=t.object({NODE_ENV:t.enum(["development","production","test"]).default("development"),PORT:t.coerce.number().int().positive().default(8081),LOG_LEVEL:t.enum(["fatal","error","warn","info","debug","trace"]).default("info"),HTTP_STREAM_ENDPOINT:t.string().startsWith("/").default("/mcp"),AUTH_TOKEN:t.string().optional().default("browser-manager-mcp-server-default-token-2024"),REQUIRE_AUTH:t.coerce.boolean().default(!1),HEALTH_CHECK_PATH:t.string().startsWith("/").default(s.path).describe("Chemin pour le point de terminaison de vérification de l'état.")}).safeParse(process.env);if(!c.success){console.error("❌ Variables d'environnement invalides détectées dans .env:");for(const e of c.error.issues)console.error(`  - Champ: ${e.path.join(".")||"global"}, Problème: ${e.message}`);console.error("Veuillez corriger les variables d'environnement et redémarrer l'application."),process.exit(1)}export const config=c.data;"production"===config.NODE_ENV&&(!config.AUTH_TOKEN||"browser-manager-mcp-server-default-token-2024"===config.AUTH_TOKEN||config.AUTH_TOKEN.length<16)&&(console.warn("ATTENTION : AUTH_TOKEN utilise une valeur par défaut en environnement de PRODUCTION."),console.warn("Pour une sécurité optimale, définissez un AUTH_TOKEN personnalisé dans votre fichier .env."));