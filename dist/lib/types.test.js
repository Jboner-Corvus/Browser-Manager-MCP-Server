import{describe as e,it as t,expect as n,vi as o}from"vitest";import{isAppRuntimeSession as s}from"./types.js";import{IncomingMessage as i}from"http";import{Socket as r}from"net";o.mock("net",()=>({Socket:class{}})),o.mock("http",()=>({IncomingMessage:class{socket;constructor(e){this.socket=e}}}));const d=new r;e("isAppRuntimeSession",()=>{t("should return true for a valid session object",()=>{const e={frameworkSessionId:"test-id",request:new i(d),sendEvent:o.fn(),closeConnection:o.fn(),auth:{id:"auth-id",type:"Bearer",authenticatedAt:Date.now(),clientIp:"127.0.0.1"}};n(s(e)).toBe(!0)}),t("should return false for invalid session objects",()=>{n(s(null)).toBe(!1),n(s(void 0)).toBe(!1),n(s("string")).toBe(!1),n(s(123)).toBe(!1),n(s({})).toBe(!1),n(s({request:new i(d),sendEvent:o.fn(),closeConnection:o.fn()})).toBe(!1),n(s({frameworkSessionId:"test-id",request:{},sendEvent:o.fn(),closeConnection:o.fn()})).toBe(!1),n(s({frameworkSessionId:"test-id",request:new i(d),closeConnection:o.fn()})).toBe(!1),n(s({frameworkSessionId:"test-id",request:new i(d),sendEvent:o.fn()})).toBe(!1),n(s({frameworkSessionId:"test-id",request:new i(d),sendEvent:o.fn(),closeConnection:o.fn(),auth:null})).toBe(!1),n(s({frameworkSessionId:"test-id",request:new i(d),sendEvent:o.fn(),closeConnection:o.fn(),auth:{id:"1",type:"test",authenticatedAt:123}})).toBe(!1)}),t("should handle request.socket being null or undefined",()=>{const e={frameworkSessionId:"test-id",request:new i(d),sendEvent:o.fn(),closeConnection:o.fn(),auth:{id:"auth-id",type:"Bearer",authenticatedAt:Date.now(),clientIp:"127.0.0.1"}};e.request.socket=null,n(s(e)).toBe(!0);const t={frameworkSessionId:"test-id",request:new i(d),sendEvent:o.fn(),closeConnection:o.fn(),auth:{id:"auth-id",type:"Bearer",authenticatedAt:Date.now(),clientIp:"127.0.0.1"}};t.request.socket=void 0,n(s(t)).toBe(!0)})});